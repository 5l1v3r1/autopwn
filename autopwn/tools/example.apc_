# autopwn yaml tool config file

# The name as it will be referenced by in assessments
name: example

# Location of the file on filesystem
binary_location: /usr/bin/example

# Website
url: http://example.net/

# Rules which must be abided by in order for the tool to be executed
# Valid items are:
# * equals
# * not-equals
# * less-than
# * greater-than
# * target-parameter-exists
rules:
   target-parameter-exists: ['ip','domain_name','port_number','protocol']
   equals:
      'protocol': 'https'
   not-equals:
      'domain_name': ['localhost','127.0.0.1']

# Some tools accept cookie strings on the command line, the following options
# deal with this.
# 1 - The option setting allows for the specification of the option value to
#     set cookie strings for this particular tool
# 2 - The option-separator setting allows for the specification of the separator
#     between the option value and the argument. This will normally be a space,
#     but sometimes this won't be the case
# 3 - The substitution setting allows for the specification of the format of the
#     cookie string. This will typically be key=value
# 4 - If the argument-prepend-option setting is set to True, then the tool expects
#     the option to specified before each cookie. For example:
#     -C cookie1=cookie1 -C cookie2=cookie2
# 5 - The argument-separator setting only applies when the argument-prepend-option is
#     set to False. It allows for the specification of a separator between cookies.
#     For example: -C cookie1=cookie1,cookie2=cookie2
# 6 - The argument-encapsulation setting allows for the specification of argument
#     encapsulation values. This will typically be a single or double quote
cookie-cli-option-format:
   option: '-C'
   option-separator: ' '
   substitution: '%(cookie-name)s=%(cookie-value)s'
   argument-prepend-option: True
   argument-separator: '\;'
   argument-encapsulation: '"'

# Some tools also accept the option to specify a cookie file. The following options
# deal with this.
# 1 - The option setting allows for the specification of the cookie file option value
# 2 - The option-separator setting allows for the specification of the option separator
#     between the cookie file option and the cookie file argument. This will normally be
#     a space
# 3 - The substitution setting allows for the specification of the format of the cookie
#     file argument. This will typically be just the file name
cookie-file-option-format:
   option: '--cookie-file'
   option-separator: ' '
   substitution: '%(cookies-file)s'

# Execute shell commands before and/or after tool execution
# Pre and post tool execution commands will always run one
# after another (even if parallel option set)
pre_tool_execution: "sleep 5"
post_tool_execution: "/usr/bin/example_report {output_dir}"

# Tool arguments
# Python's str.format() is used for variable replacement. Valid entries are:
# * domain_name
# * ip
# * protocol (returns 'http' or 'https')
# * date (current date in format 20150226_213959) # date =  strftime("%Y%m%d_%H%M%S")
# * port_number (if target port number has been specified)
# * output_dir (directory where tool output will be saved for specific target)
arguments: "{protocol}://{domain_name}:{port_number} -o {output_dir}/{date}_example_{domain_name}"

# Given the arguments option, will this tool generate output? If redirection is used,
# then this is not going to be the case (excluding stderr).
# Specifyng this option will determine whether or not a stdout file for the tool
# is generated
stdout: True
